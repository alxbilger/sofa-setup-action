# Action description and parameters
name: 'SOFA Setup Action'
description: 'Setup everything needed to build a SOFA plugin'
inputs:
  sofa_root:  # id of input
    description: 'SOFA install directory'
    required: true
    default: '/opt/sofa'
  sofa_version: # id of input
    description: 'Major version of SOFA to install'
    required: true
    default: 'v21.06'
outputs:
  sofa_root:
    description: "SOFA root directory"
    value: ${{ inputs.sofa_root }}
  sofa_version:
    description: "SOFA version"
    value: ${{ inputs.sofa_version }}
  sofa_os:
    description: "Runner OS with name adapted for SOFA download"
    value: ${{ steps.set-env-vars.outputs.sofa_os }}
  run_branch:
    description: "Prettified git branch of this workflow run"
    value: ${{ steps.set-env-vars.outputs.run_branch }}
  python_version:
    description: "Python version installed for SOFA"
    value: ${{ steps.set-env-vars.outputs.python_version }}
  pybind11_version:
    description: "Pybind11 version installed for SOFA"
    value: ${{ steps.set-env-vars.outputs.pybind11_version }}
  vs_vsdevcmd:
    description: "Command to init VS environment"
    value: ${{ steps.set-env-vars.outputs.vs_vsdevcmd }}

# Action code
runs:
  using: "composite"
  steps:
    - name: Set env vars
      id: set-env-vars
      shell: bash
      run: |
        # Set env vars
        if [ -n "${{ github.event.number }}" ]; then
          run_branch="PR-${{ github.event.number }}"
        elif [ -n "${{ github.event.pull_request.number }}" ]; then
          run_branch="PR-${{ github.event.pull_request.number }}"
        elif [ -n "${{ github.event.issue.number }}" ]; then
          run_branch="PR-${{ github.event.issue.number }}"
        else
          run_branch="${GITHUB_REF#refs/heads/}"
        fi
        echo "::set-output name=run_branch::$(echo $run_branch)"
        
        SOFA_OS="$RUNNER_OS"
        if [[ "$SOFA_OS" == "macOS" ]]; then
            SOFA_OS="MacOS"
        fi
        echo "SOFA_OS=$SOFA_OS" | tee -a $GITHUB_ENV
        echo "::set-output name=sofa_os::$(echo $SOFA_OS)"
        
        # TODO: find a better way to handle dependency versions
        if [[ "$SOFA_OS" == "Linux" ]]; then
            PYTHON_VERSION=3.8
            PYBIND11_VERSION=2.4.3
            GITHUB_WORKSPACE_PARENT="$(cd $GITHUB_WORKSPACE/.. && pwd)"
        elif [[ "$SOFA_OS" == "MacOS" ]]; then
            PYTHON_VERSION=3.9
            PYBIND11_VERSION=2.4.3
            GITHUB_WORKSPACE_PARENT="$(cd $GITHUB_WORKSPACE/.. && pwd)"
        elif [[ "$SOFA_OS" == "Windows" ]]; then
            PYTHON_VERSION=3.7
            PYBIND11_VERSION=2.4.3
            GITHUB_WORKSPACE_PARENT="$(cd $GITHUB_WORKSPACE/.. && pwd -W)"
            
            # vsdevcmd.bat is here: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/vsdevcmd.bat'
            VS_INSTALL_DIR="$(cmd //c 'vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath')"
            VS_VSDEVCMD='C: && cd '$VS_INSTALL_DIR'\Common7\Tools && VsDevCmd.bat -host_arch=amd64 -arch=amd64 && D:'
        fi
        echo "PYTHON_VERSION=$PYTHON_VERSION" | tee -a $GITHUB_ENV
        echo "PYBIND11_VERSION=$PYBIND11_VERSION" | tee -a $GITHUB_ENV
        echo "GITHUB_WORKSPACE_PARENT=$GITHUB_WORKSPACE_PARENT" | tee -a $GITHUB_ENV
        echo "VS_INSTALL_DIR=$VS_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "VS_VSDEVCMD=$VS_VSDEVCMD" | tee -a $GITHUB_ENV
        echo "::set-output name=python_version::$(echo $PYTHON_VERSION)"
        echo "::set-output name=pybind11_version::$(echo $PYBIND11_VERSION)"
        echo "::set-output name=vs_vsdevcmd::$(echo $VS_VSDEVCMD)"

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install requirements
      shell: bash
      run: |
        if [[ "$SOFA_OS" == "Linux" ]]; then
          sudo apt-get -qq install ccache ninja-build
          sudo apt-get -qq install libboost-dev libboost-system-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
          sudo apt-get -qq install libeigen3-dev 
          python3 -m pip install numpy scipy
        elif [[ "$SOFA_OS" == "MacOS" ]]; then
          brew install ccache ninja
          brew install boost
          brew install eigen
          brew list | grep python | while read package; do
            brew unlink $package
          done
          python3 -m pip install numpy scipy
        elif [[ "$SOFA_OS" == "Windows" ]]; then
          cmd //c 'choco install -y --no-progress nsis'
          cmd //c 'choco install -y --no-progress curl'
          cmd //c 'choco install -y --no-progress ninja'
          
          cmd //c 'choco install -y --no-progress boost-msvc-14.2'
          boost_install_dir='C:/local/boost_1_74_0'
          echo "BOOST_ROOT=$boost_install_dir" | tee -a $GITHUB_ENV
          echo "Boost_ROOT=$boost_install_dir" | tee -a $GITHUB_ENV
          echo "$boost_install_dir" >> $GITHUB_PATH
          
          curl -L "https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.zip" --output "C:/eigen.zip"
          unzip -qq "C:/eigen.zip" -d "C:/eigen" && rm "C:/eigen.zip"
          eigen_install_dir='C:/eigen/eigen-3.3.7'
          echo "EIGEN3_ROOT=$eigen_install_dir" | tee -a $GITHUB_ENV
          echo "Eigen3_ROOT=$eigen_install_dir" | tee -a $GITHUB_ENV
          echo "$eigen_install_dir" >> $GITHUB_PATH
            
          cmd //c 'call refreshenv && echo OK'
          cmd //c 'python -m pip install numpy scipy'
        fi
        
    - name: Build and install pybind11
      shell: bash
      run: |
        # Build and install pybind11
        if [[ "$SOFA_OS" == "Windows" ]]; then
          cmd //c "git clone -b v$PYBIND11_VERSION --depth 1 https://github.com/pybind/pybind11.git C:/pybind11/src"
          cmd //c "${{ env.VS_VSDEVCMD }} && cd C:/pybind11/src && cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DPYBIND11_TEST=OFF -DCMAKE_INSTALL_PREFIX=C:/pybind11/install ."
          cmd //c "${{ env.VS_VSDEVCMD }} && cd C:/pybind11/src && ninja install"
          cmd //c "setx /M pybind11_ROOT C:/pybind11/install"
        else
          git clone -b v${PYBIND11_VERSION} --depth 1 https://github.com/pybind/pybind11.git /tmp/pybind11
          cd /tmp/pybind11
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DPYBIND11_TEST=OFF -DPYTHON_EXECUTABLE=$(which python${{ env.PYTHON_VERSION }}) .
          sudo ninja install
        fi

    - name: Download and install the latest SOFA ${{ inputs.sofa_version }} binaries
      shell: bash
      run: |
        # Download and install the latest SOFA ${{ inputs.sofa_version }} binaries
        mkdir -p /tmp/sofa_zip
        mkdir -p /tmp/sofa_binaries
        curl --output /tmp/sofa_zip/${SOFA_OS}.zip -L \
          https://ci.inria.fr/sofa-ci-dev/job/nightly-generate-binaries/CI_BRANCH=${{ inputs.sofa_version }},CI_SCOPE=minimal/lastSuccessfulBuild/artifact/${SOFA_OS}/*zip*/${SOFA_OS}.zip
        unzip -qq /tmp/sofa_zip/${SOFA_OS}.zip -d /tmp/sofa_zip
        unzip -qq /tmp/sofa_zip/${SOFA_OS}/SOFA_*.zip -d /tmp/sofa_binaries
        if [[ "$SOFA_OS" == "Windows" ]]; then
          mkdir -p "${{ inputs.sofa_root }}"
          mv /tmp/sofa_binaries/SOFA_*/* "${{ inputs.sofa_root }}"
          ls -la "${{ inputs.sofa_root }}"
        else
          sudo mv /tmp/sofa_binaries/SOFA_* "${{ inputs.sofa_root }}"
          sudo ls -la "${{ inputs.sofa_root }}"
        fi
        rm -rf /tmp/sofa_*
        echo "${{ inputs.sofa_root }}" >> $GITHUB_PATH
        echo "Done."
