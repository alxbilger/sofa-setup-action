# Action description and parameters
name: 'SOFA Setup Action'
description: 'Setup everything needed to build a SOFA plugin'
inputs:
  sofa_root:  # id of input
    description: 'SOFA install directory'
    required: true
    default: '/opt/sofa'
  sofa_version: # id of input
    description: 'Major version of SOFA to install'
    required: true
    default: 'v21.06'
outputs:
  sofa_root:
    description: "SOFA root directory"
    value: ${{ inputs.sofa_root }}
  sofa_version:
    description: "SOFA version"
    value: ${{ inputs.sofa_version }}
  sofa_os:
    description: "Runner OS with name adapted for SOFA download"
    value: ${{ steps.set-env-vars.outputs.sofa_os }}
  run_branch:
    description: "Pretty git branch of this workflow run"
    value: ${{ steps.set-env-vars.outputs.run_branch }}
  python_root:
    description: "Root directory of the Python installed for SOFA"
    value: ${{ steps.set-python-vars.outputs.python_root }}
  python_version:
    description: "Version of the Python installed for SOFA"
    value: ${{ steps.set-env-vars.outputs.python_version }}
  pybind11_version:
    description: "Pybind11 version installed for SOFA"
    value: ${{ steps.set-env-vars.outputs.pybind11_version }}
  vs_install_dir:
    description: "VS install directory"
    value: ${{ steps.set-env-vars.outputs.vs_install_dir }}
  vs_vsdevcmd:
    description: "Command to init VS environment"
    value: ${{ steps.set-env-vars.outputs.vs_vsdevcmd }}

# Action code
runs:
  using: "composite"
  steps:
    - name: Set env vars
      id: set-env-vars
      shell: bash
      run: |
        # Set env vars
        echo "------------------------------"
        ls -la "${{ github.workflow }}"
        echo "------------------------------"
        ls -la "${{ github.action_path }}"
        echo "------------------------------"
        ls -la "${{ github.action_path }}/.github/workflows"
        echo "------------------------------"
        ACTION_PATH="${{ github.action_path }}/*.yml"
        echo "ACTION_PATH=$ACTION_PATH" | tee -a $GITHUB_ENV
        
        if [ -n "${{ github.event.number }}" ]; then
          RUN_BRANCH="PR-${{ github.event.number }}"
        elif [ -n "${{ github.event.pull_request.number }}" ]; then
          RUN_BRANCH="PR-${{ github.event.pull_request.number }}"
        elif [ -n "${{ github.event.issue.number }}" ]; then
          RUN_BRANCH="PR-${{ github.event.issue.number }}"
        else
          RUN_BRANCH="${GITHUB_REF#refs/heads/}"
        fi
        echo "RUN_BRANCH=$RUN_BRANCH" | tee -a $GITHUB_ENV
        echo "::set-output name=run_branch::$(echo $RUN_BRANCH)"
        
        SOFA_OS="$RUNNER_OS"
        if [[ "$SOFA_OS" == "macOS" ]]; then
            SOFA_OS="MacOS"
        fi
        echo "SOFA_OS=$SOFA_OS" | tee -a $GITHUB_ENV
        echo "::set-output name=sofa_os::$(echo $SOFA_OS)"
        
        # TODO: find a better way to handle dependency versions
        PYBIND11_INSTALL_DIR="/tmp/deps_cache_is_for_windows_only"
        EIGEN_INSTALL_DIR="/tmp/deps_cache_is_for_windows_only"
        BOOST_INSTALL_DIR="/tmp/deps_cache_is_for_windows_only"
        SUDO='sudo'
        if [[ "$SOFA_OS" == "Linux" ]]; then
            PYTHON_VERSION=3.8
            PYBIND11_VERSION=2.4.3
            EIGEN_VERSION="apt-latest"
            BOOST_VERSION="apt-latest"
        elif [[ "$SOFA_OS" == "MacOS" ]]; then
            PYTHON_VERSION=3.9
            PYBIND11_VERSION=2.4.3
            EIGEN_VERSION="brew-latest"
            BOOST_VERSION="brew-latest"
        elif [[ "$SOFA_OS" == "Windows" ]]; then
            SUDO=''
            PYTHON_VERSION=3.7
            PYBIND11_VERSION=2.4.3
            PYBIND11_INSTALL_DIR="C:/pybind11"
            EIGEN_VERSION=3.3.7
            EIGEN_INSTALL_DIR="C:/eigen"
            BOOST_VERSION=1.69.0
            BOOST_INSTALL_DIR="C:/boost"
            
            # vsdevcmd.bat is here: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/vsdevcmd.bat'
            VS_INSTALL_DIR="$(cmd //c 'vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath')"
            VS_VSDEVCMD='cd /d '$VS_INSTALL_DIR'\Common7\Tools && VsDevCmd.bat -host_arch=amd64 -arch=amd64'
        fi
        
        echo "SUDO=$SUDO" | tee -a $GITHUB_ENV
        
        echo "PYTHON_VERSION=$PYTHON_VERSION" | tee -a $GITHUB_ENV
        
        echo "PYBIND11_VERSION=$PYBIND11_VERSION" | tee -a $GITHUB_ENV
        echo "PYBIND11_INSTALL_DIR=$PYBIND11_INSTALL_DIR" | tee -a $GITHUB_ENV
        
        echo "EIGEN_VERSION=$EIGEN_VERSION" | tee -a $GITHUB_ENV
        echo "EIGEN_INSTALL_DIR=$EIGEN_INSTALL_DIR" | tee -a $GITHUB_ENV
        
        echo "BOOST_VERSION=$BOOST_VERSION" | tee -a $GITHUB_ENV
        echo "BOOST_INSTALL_DIR=$BOOST_INSTALL_DIR" | tee -a $GITHUB_ENV
        
        echo "VS_INSTALL_DIR=$VS_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "VS_VSDEVCMD=$VS_VSDEVCMD" | tee -a $GITHUB_ENV
        
        echo "::set-output name=python_version::$(echo $PYTHON_VERSION)"
        echo "::set-output name=pybind11_version::$(echo $PYBIND11_VERSION)"
        echo "::set-output name=vs_install_dir::$(echo $VS_INSTALL_DIR)"
        echo "::set-output name=vs_vsdevcmd::$(echo $VS_VSDEVCMD)"

    - name: Install Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set vars PYTHON_ROOT and outputs.python_root 
      id: set-python-vars
      shell: bash
      run: |
        echo "----------------------------"
        HASH_FORMAT_1="${{ hashFiles(format('{0}/*.yml', github.action_path)) }}"
        HASH_FORMAT_2="${{ hashFiles(format('{0}', env.ACTION_PATH)) }}"
        HASH_FORMAT_3="${{ hashFiles(env.ACTION_PATH) }}"
        HASH_FORMAT_4="${{ hashFiles(github.workflow) }}"
        echo "HASH_FORMAT_1 = $HASH_FORMAT_1"
        echo "HASH_FORMAT_2 = $HASH_FORMAT_2"
        echo "HASH_FORMAT_3 = $HASH_FORMAT_3"
        echo "HASH_FORMAT_4 = $HASH_FORMAT_4"
        echo "----------------------------"
        PYTHONIOENCODING="UTF-8"
        PYTHONUSERBASE="/tmp/pythonuserbase"
        if [[ "$SOFA_OS" == "Windows" ]]; then
          PYTHONUSERBASE="C:/pythonuserbase"
        fi
        mkdir -p "$PYTHONUSERBASE" && chmod -R 777 "$PYTHONUSERBASE"
        echo "PYTHONIOENCODING=$PYTHONIOENCODING" | tee -a $GITHUB_ENV
        echo "PYTHONUSERBASE=$PYTHONUSERBASE" | tee -a $GITHUB_ENV
        
        PYTHON_ROOT="$(find $RUNNER_TOOL_CACHE -maxdepth 3 -type d -path '**/Python/${{ env.PYTHON_VERSION }}*/x64')"
        PYTHON_ROOT="$(cd $PYTHON_ROOT && pwd -W 2>/dev/null || pwd)"
        echo "PYTHON_ROOT=$PYTHON_ROOT" | tee -a $GITHUB_ENV
        echo "::set-output name=python_root::$(echo $PYTHON_ROOT)"

    - name: Install numpy and scipy
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          python3 -m pip install numpy scipy
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew list | grep python | while read package; do
            brew unlink $package
          done
          python3 -m pip install numpy scipy
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          cmd //c 'python -m pip install numpy scipy'
        fi
      
    - name: Install build tools
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get -qq install ccache ninja-build
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install ccache ninja
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          cmd //c 'choco install -y --no-progress nsis curl ninja'
        fi
    
    - name: Boost cache files
      uses: actions/cache@v2
      id: boost_cache
      with:
        path: ${{ env.BOOST_INSTALL_DIR }}
        key: boost_${{ env.RUN_BRANCH }}_${{ env.SOFA_OS }}_${{ env.BOOST_VERSION }}_${{ hashFiles(format('{0}', env.ACTION_PATH)) }}
    
    - name: Install Boost
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get -qq install libboost-dev libboost-system-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install boost
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          if ! ls -a "$BOOST_INSTALL_DIR"/* >/dev/null 2>&1; then
            # directory does not exist or is empty
            major="$(echo $BOOST_VERSION | cut -d. -f1)"
            minor="$(echo $BOOST_VERSION | cut -d. -f2)"
            patch="$(echo $BOOST_VERSION | cut -d. -f3)"
            curl --output "${{ runner.temp }}/boost_tmp.exe" -L \
              "https://downloads.sourceforge.net/project/boost/boost-binaries/${BOOST_VERSION}/boost_${major}_${minor}_${patch}-msvc-14.1-64.exe"              
            cmd //c "${{ runner.temp }}/boost_tmp.exe /NORESTART /VERYSILENT /DIR=$BOOST_INSTALL_DIR"
          fi
          echo "BOOST_ROOT=$BOOST_INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "Boost_ROOT=$BOOST_INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "$BOOST_INSTALL_DIR" >> $GITHUB_PATH
        fi
        
    - name: Eigen cache files
      uses: actions/cache@v2
      id: eigen_cache
      with:
        path: ${{ env.EIGEN_INSTALL_DIR }}
        key: eigen_${{ env.RUN_BRANCH }}_${{ env.SOFA_OS }}_${{ env.EIGEN_VERSION }}_${{ hashFiles(env.ACTION_PATH) }}

    - name: Install Eigen
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get -qq install libeigen3-dev 
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install eigen
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          if ! ls -a "$EIGEN_INSTALL_DIR"/* >/dev/null 2>&1; then
            # directory does not exist or is empty
            mkdir -p "$EIGEN_INSTALL_DIR"
            curl --output "${{ runner.temp }}/eigen_tmp.zip" -L \
              "https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/eigen-${EIGEN_VERSION}.zip"
            unzip -qq "${{ runner.temp }}/eigen_tmp.zip" -d "${{ runner.temp }}/eigen_tmp"
            mv ${{ runner.temp }}/eigen_tmp/eigen-*/* $EIGEN_INSTALL_DIR
          fi
          echo "EIGEN3_ROOT=$EIGEN_INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "Eigen3_ROOT=$EIGEN_INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "$EIGEN_INSTALL_DIR" >> $GITHUB_PATH
        fi
        
    - name: pybind11 cache files
      uses: actions/cache@v2
      id: pybind11_cache
      with:
        path: ${{ env.PYBIND11_INSTALL_DIR }}
        key: pybind11_${{ env.RUN_BRANCH }}_${{ env.SOFA_OS }}_${{ env.PYBIND11_VERSION }}_${{ hashFiles(env.ACTION_PATH) }}

    - name: Install pybind11
      shell: bash
      run: |
        # Build and install pybind11
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          if ! ls -a "$PYBIND11_INSTALL_DIR"/* >/dev/null 2>&1; then
            # directory does not exist or is empty
            git clone -b v$PYBIND11_VERSION --depth 1 https://github.com/pybind/pybind11.git ${{ runner.temp }}/pybind11_tmp
            cmd //c "${{ env.VS_VSDEVCMD }} && \
              cd /d ${{ runner.temp }}/pybind11_tmp && \
              cmake \
                -GNinja \
                -DCMAKE_BUILD_TYPE=Release \
                -DPYBIND11_TEST=OFF \
                -DCMAKE_INSTALL_PREFIX=$PYBIND11_INSTALL_DIR \
                . && \
                ninja install"
          fi          
          echo "pybind11_ROOT=$PYBIND11_INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "$PYBIND11_INSTALL_DIR" >> $GITHUB_PATH
        else
          git clone -b v${PYBIND11_VERSION} --depth 1 https://github.com/pybind/pybind11.git ${{ runner.temp }}/pybind11_tmp
          cd ${{ runner.temp }}/pybind11_tmp
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DPYBIND11_TEST=OFF \
            -DPYTHON_EXECUTABLE=$(which python${{ env.PYTHON_VERSION }}) \
            .
          sudo ninja install
        fi
        
    - name: SOFA cache files
      uses: actions/cache@v2
      id: sofa_cache
      with:
        path: ${{ inputs.sofa_root }}
        key: sofa_${{ env.RUN_BRANCH }}_${{ env.SOFA_OS }}_${{ inputs.sofa_version }}_${{ hashFiles(env.ACTION_PATH) }}

    - name: Download and install the latest SOFA ${{ inputs.sofa_version }} binaries
      shell: bash
      run: |
        # Download and install the latest SOFA ${{ inputs.sofa_version }} binaries
        if ! ls -a "${{ inputs.sofa_root }}"/* >/dev/null 2>&1; then
          # directory does not exist or is empty
          mkdir -p "${{ runner.temp }}/sofa_tmp/zip" "${{ runner.temp }}/sofa_tmp/binaries"
          curl --output "${{ runner.temp }}/sofa_tmp/${SOFA_OS}.zip" -L \
            https://ci.inria.fr/sofa-ci-dev/job/nightly-generate-binaries/CI_BRANCH=${{ inputs.sofa_version }},CI_SCOPE=minimal/lastSuccessfulBuild/artifact/${SOFA_OS}/*zip*/${SOFA_OS}.zip
          unzip -qq ${{ runner.temp }}/sofa_tmp/${SOFA_OS}.zip -d ${{ runner.temp }}/sofa_tmp/zip
          unzip -qq ${{ runner.temp }}/sofa_tmp/zip/${SOFA_OS}/SOFA_*.zip -d ${{ runner.temp }}/sofa_tmp/binaries          
          $SUDO mkdir -p "${{ inputs.sofa_root }}"
          $SUDO mv ${{ runner.temp }}/sofa_tmp/binaries/SOFA_*/* "${{ inputs.sofa_root }}"
        fi
        echo '${{ inputs.sofa_root }}' >> $GITHUB_PATH
        echo '${{ inputs.sofa_root }}\bin' >> $GITHUB_PATH
        echo "SOFA downloaded and installed in ${{ inputs.sofa_root }}"
        echo '----- ls -la "${{ inputs.sofa_root }}" -----'
        ls -la "${{ inputs.sofa_root }}"
