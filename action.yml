# Action description and parameters
name: 'SOFA Setup Action'
description: 'Setup everything needed to build a SOFA plugin'
inputs:
  sofa_root:  # id of input
    description: 'SOFA install directory'
    required: true
    default: '/opt/sofa'
  sofa_version: # id of input
    description: 'Major version of SOFA to install'
    required: true
    default: 'v21.06'
outputs:
  sofa_root:
    description: "SOFA root directory"
    value: ${{ inputs.sofa_root }}
  sofa_version:
    description: "SOFA version"
    value: ${{ inputs.sofa_version }}
  sofa_os:
    description: "Runner OS with name adapted for SOFA download"
    value: ${{ steps.set-env-vars.outputs.sofa_os }}
  run_branch:
    description: "Prettified git branch of this workflow run"
    value: ${{ steps.set-env-vars.outputs.run_branch }}
  python_version:
    description: "Python version installed for SOFA"
    value: ${{ steps.set-env-vars.outputs.python_version }}
  pybind11_version:
    description: "Pybind11 version installed for SOFA"
    value: ${{ steps.set-env-vars.outputs.pybind11_version }}

# Action code
runs:
  using: "composite"
  steps:
    - name: Set env vars
      id: set-env-vars
      shell: bash
      run: |
        # Set env vars
        if [ -n "${{ github.event.number }}" ]; then
          run_branch="PR-${{ github.event.number }}"
        elif [ -n "${{ github.event.pull_request.number }}" ]; then
          run_branch="PR-${{ github.event.pull_request.number }}"
        elif [ -n "${{ github.event.issue.number }}" ]; then
          run_branch="PR-${{ github.event.issue.number }}"
        else
          run_branch="${GITHUB_REF#refs/heads/}"
        fi
        echo "::set-output name=run_branch::$(echo $run_branch)"
        
        SOFA_OS="$RUNNER_OS"
        if [[ "$SOFA_OS" == "macOS" ]]; then
            SOFA_OS="MacOS"
        fi
        echo "SOFA_OS=$SOFA_OS" | tee -a $GITHUB_ENV
        echo "::set-output name=sofa_os::$(echo $SOFA_OS)"
        
        # TODO: find a better way to handle dependency versions
        if [[ "$SOFA_OS" == "Linux" ]]; then
            PYTHON_VERSION=3.8
            PYBIND11_VERSION=2.4.3
        elif [[ "$SOFA_OS" == "MacOS" ]]; then
            PYTHON_VERSION=3.9
            PYBIND11_VERSION=2.4.3
        elif [[ "$SOFA_OS" == "Windows" ]]; then
            PYTHON_VERSION=3.7
            PYBIND11_VERSION=2.4.3
        fi
        echo "PYTHON_VERSION=$PYTHON_VERSION" | tee -a $GITHUB_ENV
        echo "PYBIND11_VERSION=$PYBIND11_VERSION" | tee -a $GITHUB_ENV
        echo "::set-output name=python_version::$(echo $PYTHON_VERSION)"
        echo "::set-output name=pybind11_version::$(echo $PYBIND11_VERSION)"

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: (Linux) Install requirements
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        # Install requirements
        #sudo apt-get -qq install libboost-dev libboost-system-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
        #sudo apt-get -qq install libeigen3-dev 
        sudo apt-get -qq install ccache ninja-build
        python3 -m pip install numpy scipy

    - name: (MacOS) Install requirements
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: |
        # Install requirements
        #brew install eigen boost
        brew install ccache ninja
        brew list | grep python | while read package; do
          brew unlink $package
        done
        python3 -m pip install numpy scipy

    - name: (Windows) Install requirements
      if: ${{ runner.os == 'Windows' }}
      shell: cmd
      run: |
        REM Install requirements
        choco install -y --no-progress nsis
        choco install -y --no-progress curl
        choco install -y --no-progress ninja
        call refreshenv && echo OK
        python -m pip install numpy scipy
        
    - name: Build and install pybind11
      shell: bash
      run: |
        # Build and install pybind11
        git clone -b v${PYBIND11_VERSION} --depth 1 https://github.com/pybind/pybind11.git /tmp/pybind11
        cd /tmp/pybind11
        if [[ "$SOFA_OS" == "Windows" ]]; then
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DPYBIND11_TEST=OFF -DCMAKE_INSTALL_PREFIX="C:/dev/pybind11" .
          ninja --silent install
        else
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DPYBIND11_TEST=OFF -DPYTHON_EXECUTABLE=$(which python${{ env.PYTHON_VERSION }}) .
          sudo ninja --silent install
        fi

    - name: (Windows) Set pybind11_ROOT env var
      if: ${{ runner.os == 'Windows' }}
      shell: cmd
      run: |
        setx /M pybind11_ROOT C:\dev\pybind11

    - name: Download and install the latest SOFA ${{ inputs.sofa_version }} binaries
      shell: bash
      run: |
        # Download and install the latest SOFA ${{ inputs.sofa_version }} binaries
        mkdir -p /tmp/sofa_zip
        mkdir -p /tmp/sofa_binaries
        curl --output /tmp/sofa_zip/${SOFA_OS}.zip -L \
          https://ci.inria.fr/sofa-ci-dev/job/nightly-generate-binaries/CI_BRANCH=${{ inputs.sofa_version }},CI_SCOPE=minimal/lastSuccessfulBuild/artifact/${SOFA_OS}/*zip*/${SOFA_OS}.zip
        unzip -qq /tmp/sofa_zip/${SOFA_OS}.zip -d /tmp/sofa_zip
        unzip -qq /tmp/sofa_zip/${SOFA_OS}/SOFA_*.zip -d /tmp/sofa_binaries
        sudo mv /tmp/sofa_binaries/SOFA_* ${{ inputs.sofa_root }}
        sudo ls -la ${{ inputs.sofa_root }}
        rm -rf /tmp/sofa_*
        echo "Done."
